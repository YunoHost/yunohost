#!/usr/bin/env bash
#
# Copyright (c) 2024 YunoHost Contributors
#
# This file is part of YunoHost (see https://yunohost.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

readonly GOENV_INSTALL_DIR="/opt/goenv"

# GOENV_ROOT is the directory of goenv, it needs to be loaded as a environment variable.
export GOENV_ROOT="$GOENV_INSTALL_DIR"
export goenv_root="$GOENV_INSTALL_DIR"

_ynh_load_go_in_path_and_other_tweaks() {

    # Get the absolute path of this version of Go
    go_dir="$GOENV_INSTALL_DIR/versions/$go_version/bin"

    # Load the path of this version of Go in $PATH
    if [[ :$PATH: != *":$go_dir"* ]]; then
        PATH="$go_dir:$PATH"
    fi

    # Export PATH such that it's available through sudo -E / ynh_exec_as $app
    export PATH

    # This is in full lowercase such that it gets replaced in templates
    path_with_go="$PATH"
    PATH_with_go="$PATH"

    # Sets the local application-specific Go version
    pushd ${install_dir}
    $GOENV_INSTALL_DIR/bin/goenv local $go_version
    popd
}

# Install a specific version of Go using goenv
#
# The installed version is defined by `$go_version` which should be defined as global prior to calling this helper
#
# usage: ynh_go_install
#
# The helper adds the appropriate, specific version of go to the `$PATH` variable (which
# is preserved when calling ynh_exec_as_app). Also defines:
# - `$path_with_go` to be used in the systemd config (`Environment="PATH=__PATH_WITH_RUBY__"`)
# - `$go_dir`, the directory containing the specific version of go, which may be used in the systemd config too (e.g. `ExecStart=__RUBY_DIR__/go foo bar`)
#
# This helper also creates a /etc/profile.d/goenv.sh that configures PATH environment for goenv
ynh_go_install() {

    [[ -n "${go_version:-}" ]] || ynh_die "\$go_version should be defined prior to calling ynh_go_install"

    # Load goenv path in PATH
    local CLEAR_PATH="$GOENV_INSTALL_DIR/bin:$PATH"

    # Remove /usr/local/bin in PATH in case of Go prior installation
    PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

    # Move an existing Go binary, to avoid to block goenv
    test -x /usr/bin/go && mv /usr/bin/go /usr/bin/go_goenv

    # Install or update goenv
    mkdir -p $GOENV_INSTALL_DIR
    goenv="$(command -v goenv $GOENV_INSTALL_DIR/bin/goenv | grep "$GOENV_INSTALL_DIR/bin/goenv" | head -1)"
    if [ -n "$goenv" ]; then
        pushd "${goenv%/*/*}"
        if git remote -v 2> /dev/null | grep "https://github.com/go-nv/goenv.git"; then
            echo "Updating goenv..."
            git pull -q --tags origin master
            _ynh_go_try_bash_extension
        else
            echo "Reinstalling goenv..."
            cd ..
            ynh_safe_rm $GOENV_INSTALL_DIR
            mkdir -p $GOENV_INSTALL_DIR
            cd $GOENV_INSTALL_DIR
            git init -q
            git remote add -f -t master origin https://github.com/go-nv/goenv.git > /dev/null 2>&1
            git checkout -q -b master origin/master
            _ynh_go_try_bash_extension
            goenv=$GOENV_INSTALL_DIR/bin/goenv
        fi
        popd
    else
        echo "Installing goenv..."
        pushd $GOENV_INSTALL_DIR
        git init -q
        git remote add -f -t master origin https://github.com/go-nv/goenv.git > /dev/null 2>&1
        git checkout -q -b master origin/master
        _ynh_go_try_bash_extension
        goenv=$GOENV_INSTALL_DIR/bin/goenv
        popd
    fi

    mkdir -p "${GOENV_INSTALL_DIR}/plugins"

    goenv_latest="$(command -v "$GOENV_INSTALL_DIR"/plugins/*/bin/goenv-latest goenv-latest | head -1)"
    if [ -n "$goenv_latest" ]; then
        pushd "${goenv_latest%/*/*}"
        if git remote -v 2> /dev/null | grep "https://github.com/momo-lab/xxenv-latest.git"; then
            echo "Updating xxenv-latest..."
            git pull -q origin master
        fi
        popd
    else
        echo "Installing xxenv-latest..."
        git clone -q https://github.com/momo-lab/xxenv-latest.git "${GOENV_INSTALL_DIR}/plugins/xxenv-latest"
    fi

    # Enable caching
    mkdir -p "${GOENV_INSTALL_DIR}/cache"

    # Create shims directory if needed
    mkdir -p "${GOENV_INSTALL_DIR}/shims"

    # Restore /usr/local/bin in PATH
    PATH=$CLEAR_PATH

    # And replace the old Go binary
    test -x /usr/bin/go_goenv && mv /usr/bin/go_goenv /usr/bin/go

    # Install the requested version of Go
    local final_go_version=$(goenv latest --print $go_version)
    if ! [ -n "$final_go_version" ]; then
        final_go_version=$go_version
    fi
    echo "Installing Go $final_go_version"
    goenv install --skip-existing $final_go_version > /dev/null 2>&1

    # Store go_version into the config of this app
    ynh_app_setting_set --key=go_version --value=$final_go_version
    go_version=$final_go_version

    # Cleanup Go versions
    _ynh_go_cleanup

    # Set environment for Go users
    echo "#goenv
export GOENV_ROOT=$GOENV_INSTALL_DIR
export PATH=\"$GOENV_INSTALL_DIR/bin:$PATH\"
eval \"\$(goenv init -)\"
#goenv" > /etc/profile.d/goenv.sh

    # Load the environment
    export HOME=${HOME:-"/root/"}
    eval "$(goenv init -)"

    _ynh_load_go_in_path_and_other_tweaks
}

# Remove the version of Go used by the app.
#
# This helper will also cleanup unused Go versions
#
# usage: ynh_go_remove
ynh_go_remove() {

    [[ -n "${go_version:-}" ]] || ynh_die "\$go_version should be defined prior to calling ynh_go_remove"

    # Load goenv path in PATH
    local CLEAR_PATH="$GOENV_INSTALL_DIR/bin:$PATH"

    # Remove /usr/local/bin in PATH in case of Go prior installation
    PATH=$(echo $CLEAR_PATH | sed 's@/usr/local/bin:@@')

    # Remove the line for this app
    ynh_app_setting_delete --key=go_version

    # Cleanup Go versions
    _ynh_go_cleanup
}

# Remove no more needed versions of Go used by the app.
#
# [internal]
#
# This helper will check what Go version are no more required,
# and uninstall them
# If no app uses Go, goenv will be also removed.
_ynh_go_cleanup() {

    # List required Go versions
    local installed_apps=$(yunohost app list | grep -oP 'id: \K.*$')
    local required_go_versions=""
    for installed_app in $installed_apps; do
        local installed_app_go_version=$(ynh_app_setting_get --app=$installed_app --key="go_version")
        if [[ -n "$installed_app_go_version" ]]; then
            required_go_versions="${installed_app_go_version}\n${required_go_versions}"
        fi
    done

    # Remove no more needed Go versions
    local installed_go_versions=$(goenv versions --bare --skip-aliases | grep -Ev '/')
    for installed_go_version in $installed_go_versions; do
        if ! echo ${required_go_versions} | grep -q "${installed_go_version}"; then
            echo "Removing Go-$installed_go_version"
            $GOENV_INSTALL_DIR/bin/goenv uninstall --force $installed_go_version
        fi
    done

    # If none Go version is required
    if [[ -z "$required_go_versions" ]]; then
        # Remove goenv environment configuration
        echo "Removing goenv"
        ynh_safe_rm "$GOENV_INSTALL_DIR"
        ynh_safe_rm "/etc/profile.d/goenv.sh"
    fi
}

_ynh_go_try_bash_extension() {
    if [ -x src/configure ]; then
        src/configure && make -C src 2>&1 || {
            ynh_print_info "Optional bash extension failed to build, but things will still work normally."
        }
    fi
}
