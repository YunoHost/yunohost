#!/usr/bin/env bash
#
# Copyright (c) 2024 YunoHost Contributors
#
# This file is part of YunoHost (see https://yunohost.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

PSQL_ROOT_PWD_FILE=/etc/yunohost/psql
PSQL_VERSION=15

# Open a connection as a user
#
# usage: ynh_psql_connect_as --user=user --password=password [--database=database]
# | arg: -u, --user=        - the user name to connect as
# | arg: -p, --password=    - the user password
# | arg: -d, --database=    - the database to connect to
#
# examples:
#    ynh_psql_connect_as 'user' 'pass' <<< "UPDATE ...;"
#    ynh_psql_connect_as 'user' 'pass' < /path/to/file.sql
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_connect_as() {
    # Declare an array to define the options of this helper.
    local legacy_args=upd
    local -A args_array=([u]=user= [p]=password= [d]=database=)
    local user
    local password
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    sudo --login --user=postgres PGUSER="$user" PGPASSWORD="$password" psql "$database"
}

# Execute a command as root user
#
# usage: ynh_psql_execute_as_root --sql=sql [--database=database]
# | arg: -s, --sql=         - the SQL command to execute
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_execute_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=sd
    local -A args_array=([s]=sql= [d]=database=)
    local sql
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    if [ -n "$database" ]; then
        database="--database=$database"
    fi

    ynh_psql_connect_as --user="postgres" --password="$(cat $PSQL_ROOT_PWD_FILE)" \
        $database <<< "$sql"
}

# Execute a command from a file as root user
#
# usage: ynh_psql_execute_file_as_root --file=file [--database=database]
# | arg: -f, --file=        - the file containing SQL commands
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_execute_file_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=fd
    local -A args_array=([f]=file= [d]=database=)
    local file
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    if [ -n "$database" ]; then
        database="--database=$database"
    fi

    ynh_psql_connect_as --user="postgres" --password="$(cat $PSQL_ROOT_PWD_FILE)" \
        $database < "$file"
}

# Create a database and grant optionnaly privilegies to a user
#
# [internal]
#
# usage: ynh_psql_create_db db [user]
# | arg: db - the database name to create
# | arg: user - the user to grant privilegies
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_create_db() {
    local db=$1
    local user=${2:-}

    local sql="CREATE DATABASE ${db};"

    # grant all privilegies to user
    if [ -n "$user" ]; then
        sql+="ALTER DATABASE ${db} OWNER TO ${user};"
        sql+="GRANT ALL PRIVILEGES ON DATABASE ${db} TO ${user} WITH GRANT OPTION;"
    fi

    ynh_psql_execute_as_root --sql="$sql"
}

# Drop a database
#
# [internal]
#
# If you intend to drop the database *and* the associated user,
# consider using ynh_psql_remove_db instead.
#
# usage: ynh_psql_drop_db db
# | arg: db - the database name to drop
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_drop_db() {
    local db=$1
    # First, force disconnection of all clients connected to the database
    # https://stackoverflow.com/questions/17449420/postgresql-unable-to-drop-database-because-of-some-auto-connections-to-db
    ynh_psql_execute_as_root --sql="REVOKE CONNECT ON DATABASE $db FROM public;" --database="$db"
    ynh_psql_execute_as_root --sql="SELECT pg_terminate_backend (pg_stat_activity.pid) FROM pg_stat_activity WHERE pg_stat_activity.datname = '$db' AND pid <> pg_backend_pid();" --database="$db"
    sudo --login --user=postgres dropdb $db
}

# Dump a database
#
# usage: ynh_psql_dump_db --database=database
# | arg: -d, --database=    - the database name to dump
# | ret: the psqldump output
#
# example: ynh_psql_dump_db 'roundcube' > ./dump.sql
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_dump_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=([d]=database=)
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    sudo --login --user=postgres pg_dump "$database"
}

# Create a user
#
# [internal]
#
# usage: ynh_psql_create_user user pwd
# | arg: user - the user name to create
# | arg: pwd - the password to identify user by
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_create_user() {
    local user=$1
    local pwd=$2
    ynh_psql_execute_as_root --sql="CREATE USER $user WITH ENCRYPTED PASSWORD '$pwd'"
}

# Check if a psql user exists
#
# [packagingv1]
#
# usage: ynh_psql_user_exists --user=user
# | arg: -u, --user=    - the user for which to check existence
# | exit: Return 1 if the user doesn't exist, 0 otherwise
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_user_exists() {
    # Declare an array to define the options of this helper.
    local legacy_args=u
    local -A args_array=([u]=user=)
    local user
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ! sudo --login --user=postgres PGUSER="postgres" PGPASSWORD="$(cat $PSQL_ROOT_PWD_FILE)" psql -tAc "SELECT rolname FROM pg_roles WHERE rolname='$user';" | grep --quiet "$user"; then
        return 1
    else
        return 0
    fi
}

# Check if a psql database exists
#
# usage: ynh_psql_database_exists --database=database
# | arg: -d, --database=    - the database for which to check existence
# | exit: Return 1 if the database doesn't exist, 0 otherwise
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_database_exists() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=([d]=database=)
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    #Â if psql is not there, we cannot check the db
    # though it could exists.
    if ! command -v psql; then
        ynh_print_err -m "PostgreSQL is not installed, impossible to check for db existence."
        return 1
    elif ! sudo --login --user=postgres PGUSER="postgres" PGPASSWORD="$(cat $PSQL_ROOT_PWD_FILE)" psql -tAc "SELECT datname FROM pg_database WHERE datname='$database';" | grep --quiet "$database"; then
        return 1
    else
        return 0
    fi
}

# Drop a user
#
# [internal]
#
# usage: ynh_psql_drop_user user
# | arg: user - the user name to drop
#
# Requires YunoHost version 3.5.0 or higher.
ynh_psql_drop_user() {
    ynh_psql_execute_as_root --sql="DROP USER ${1};"
}

# Create a database, an user and its password. Then store the password in the app's config
#
# [packagingv1]
#
# usage: ynh_psql_setup_db --db_user=user --db_name=name [--db_pwd=pwd]
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
# | arg: -p, --db_pwd=      - Password of the database. If not provided, a password will be generated
#
# After executing this helper, the password of the created database will be available in $db_pwd
# It will also be stored as "psqlpwd" into the app settings.
#
# Requires YunoHost version 2.7.13 or higher.
ynh_psql_setup_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=([u]=db_user= [n]=db_name= [p]=db_pwd=)
    local db_user
    local db_name
    db_pwd=""
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ! ynh_psql_user_exists --user=$db_user; then
        local new_db_pwd=$(ynh_string_random) # Generate a random password
        # If $db_pwd is not provided, use new_db_pwd instead for db_pwd
        db_pwd="${db_pwd:-$new_db_pwd}"

        ynh_psql_create_user "$db_user" "$db_pwd"
    elif [ -z $db_pwd ]; then
        ynh_die --message="The user $db_user exists, please provide his password"
    fi

    ynh_psql_create_db "$db_name" "$db_user"                     # Create the database
    ynh_app_setting_set --app=$app --key=psqlpwd --value=$db_pwd # Store the password in the app's config
}

# Remove a database if it exists, and the associated user
#
# [packagingv1]
#
# usage: ynh_psql_remove_db --db_user=user --db_name=name
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
#
# Requires YunoHost version 2.7.13 or higher.
ynh_psql_remove_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -A args_array=([u]=db_user= [n]=db_name=)
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ynh_psql_database_exists --database=$db_name; then # Check if the database exists
        ynh_psql_drop_db $db_name                         # Remove the database
    else
        ynh_print_warn --message="Database $db_name not found"
    fi

    # Remove psql user if it exists
    if ynh_psql_user_exists --user=$db_user; then
        ynh_psql_drop_user $db_user
    else
        ynh_print_warn --message="User $db_user not found"
    fi
}

# Create a master password and set up global settings
#
# [internal]
#
# usage: ynh_psql_test_if_first_run
#
# It also make sure that postgresql is installed and running
# Please always call this script in install and restore scripts
#
# Requires YunoHost version 2.7.13 or higher.
ynh_psql_test_if_first_run() {

    # Make sure postgresql is indeed installed
    dpkg --list | grep -q "ii  postgresql-$PSQL_VERSION" || ynh_die --message="postgresql-$PSQL_VERSION is not installed !?"

    yunohost tools regen-conf postgresql
}
