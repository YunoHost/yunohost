#!/usr/bin/env bash
#
# Copyright (c) 2024 YunoHost Contributors
#
# This file is part of YunoHost (see https://yunohost.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

# Open a connection as a user
#
# usage: ynh_mysql_connect_as --user=user --password=password [--database=database]
# | arg: -u, --user=        - the user name to connect as
# | arg: -p, --password=    - the user password
# | arg: -d, --database=    - the database to connect to
#
# examples:
#    ynh_mysql_connect_as --user="user" --password="pass" <<< "UPDATE ...;"
#    ynh_mysql_connect_as --user="user" --password="pass" < /path/to/file.sql
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_connect_as() {
    # Declare an array to define the options of this helper.
    local legacy_args=upd
    local -A args_array=([u]=user= [p]=password= [d]=database=)
    local user
    local password
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    mysql --user="$user" --password="$password" --batch "$database"
}

# Execute a command as root user
#
# usage: ynh_mysql_execute_as_root --sql=sql [--database=database]
# | arg: -s, --sql=         - the SQL command to execute
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_execute_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=sd
    local -A args_array=([s]=sql= [d]=database=)
    local sql
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    if [ -n "$database" ]; then
        database="--database=$database"
    fi

    mysql -B "$database" <<< "$sql"
}

# Execute a command from a file as root user
#
# usage: ynh_mysql_execute_file_as_root --file=file [--database=database]
# | arg: -f, --file=        - the file containing SQL commands
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_execute_file_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=fd
    local -A args_array=([f]=file= [d]=database=)
    local file
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    if [ -n "$database" ]; then
        database="--database=$database"
    fi

    mysql -B "$database" < "$file"
}

# Create a database and grant optionnaly privilegies to a user
#
# [internal]
#
# usage: ynh_mysql_create_db db [user [pwd]]
# | arg: db - the database name to create
# | arg: user - the user to grant privilegies
# | arg: pwd - the password to identify user by
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_create_db() {
    local db=$1

    local sql="CREATE DATABASE ${db};"

    # grant all privilegies to user
    if [[ $# -gt 1 ]]; then
        sql+=" GRANT ALL PRIVILEGES ON ${db}.* TO '${2}'@'localhost'"
        if [[ -n ${3:-} ]]; then
            sql+=" IDENTIFIED BY '${3}'"
        fi
        sql+=" WITH GRANT OPTION;"
    fi

    ynh_mysql_execute_as_root --sql="$sql"
}

# Drop a database
#
# [internal]
#
# If you intend to drop the database *and* the associated user,
# consider using ynh_mysql_remove_db instead.
#
# usage: ynh_mysql_drop_db db
# | arg: db - the database name to drop
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_drop_db() {
    ynh_mysql_execute_as_root --sql="DROP DATABASE ${1};"
}

# Dump a database
#
# usage: ynh_mysql_dump_db --database=database
# | arg: -d, --database=    - the database name to dump
# | ret: The mariadb-dump output
#
# example: ynh_mysql_dump_db --database=roundcube > ./dump.sql
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_dump_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=([d]=database=)
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mariadb-dump --single-transaction --skip-dump-date --routines "$database"
}

# Create a user
#
# [internal]
#
# usage: ynh_mysql_create_user user pwd [host]
# | arg: user - the user name to create
# | arg: pwd - the password to identify user by
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_create_user() {
    ynh_mysql_execute_as_root \
        --sql="CREATE USER '${1}'@'localhost' IDENTIFIED BY '${2}';"
}

# Check if a mysql user exists
#
# [internal]
#
# usage: ynh_mysql_user_exists --user=user
# | arg: -u, --user=    - the user for which to check existence
# | ret: 0 if the user exists, 1 otherwise.
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_user_exists() {
    # Declare an array to define the options of this helper.
    local legacy_args=u
    local -A args_array=([u]=user=)
    local user
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if [[ -z $(ynh_mysql_execute_as_root --sql="SELECT User from mysql.user WHERE User = '$user';") ]]; then
        return 1
    else
        return 0
    fi
}

# Check if a mysql database exists
#
# [internal]
#
# usage: ynh_mysql_database_exists database
# | arg: database    - the database for which to check existence
# | exit: Return 1 if the database doesn't exist, 0 otherwise
#
ynh_mysql_database_exists() {
    local database=$1
    mariadb-show | grep -qE "^|\s+$database\s+|"
}

# Drop a user
#
# [internal]
#
# usage: ynh_mysql_drop_user user
# | arg: user - the user name to drop
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_drop_user() {
    ynh_mysql_execute_as_root --sql="DROP USER '${1}'@'localhost';"
}

# Create a database, an user and its password. Then store the password in the app's config
#
# [packagingv1]
#
# usage: ynh_mysql_setup_db --db_user=user --db_name=name [--db_pwd=pwd]
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
# | arg: -p, --db_pwd=      - Password of the database. If not provided, a password will be generated
#
# After executing this helper, the password of the created database will be available in `$db_pwd`
# It will also be stored as "`mysqlpwd`" into the app settings.
#
# Requires YunoHost version 2.6.4 or higher.
ynh_mysql_setup_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=([u]=db_user= [n]=db_name= [p]=db_pwd=)
    local db_user
    local db_name
    db_pwd=""
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    # Generate a random password
    local new_db_pwd=$(ynh_string_random)
    # If $db_pwd is not provided, use new_db_pwd instead for db_pwd
    db_pwd="${db_pwd:-$new_db_pwd}"

    ynh_mysql_create_db "$db_name" "$db_user" "$db_pwd"
    ynh_app_setting_set --app=$app --key=mysqlpwd --value=$db_pwd
}

# Remove a database if it exists, and the associated user
#
# [packagingv1]
#
# usage: ynh_mysql_remove_db --db_user=user --db_name=name
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
#
# Requires YunoHost version 2.6.4 or higher.
ynh_mysql_remove_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -Ar args_array=([u]=db_user= [n]=db_name=)
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if ynh_mysql_database_exists "$db_name"; then
        ynh_mysql_drop_db $db_name
    else
        ynh_print_warn --message="Database $db_name not found"
    fi

    # Remove mysql user if it exists
    if ynh_mysql_user_exists --user=$db_user; then
        ynh_mysql_drop_user $db_user
    fi
}
