#!/usr/bin/env bash
#
# Copyright (c) 2024 YunoHost Contributors
#
# This file is part of YunoHost (see https://yunohost.org)
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#

# Exit hook on subcommand error or unset variable
set -e

# Source YNH helpers
# shellcheck source=../../helpers/helpers
source /usr/share/yunohost/helpers

do_pre_regen() {
    pending_dir=$1

    cd /usr/share/yunohost/conf/dnsmasq

    # create directory for pending conf
    dnsmasq_dir="${pending_dir}/etc/dnsmasq.d"
    mkdir -p "$dnsmasq_dir"
    etcdefault_dir="${pending_dir}/etc/default"
    mkdir -p "$etcdefault_dir"

    # add default conf files
    cp plain/etcdefault "${pending_dir}/etc/default/dnsmasq"

    # add resolver file
    cat plain/resolv.dnsmasq.conf | grep "^nameserver" | shuf > "${pending_dir}/etc/resolv.dnsmasq.conf"

    # retrieve variables
    ipv4=$(curl --max-time 10 -s -4 https://ip.yunohost.org 2> /dev/null || true)
    ynh_validate_ip4 "$ipv4" || ipv4='127.0.0.1'
    ipv6=$(curl --max-time 10 -s -6 https://ip6.yunohost.org 2> /dev/null || true)
    ynh_validate_ip6 "$ipv6" || ipv6=''
    interfaces="$(ip -j addr show | jq -r '[.[].ifname]|join(" ")')"
    wireless_interfaces="lo"
    for dev in /sys/class/net/*; do
        if [ -d "$dev/wireless" ] && grep -q "up" "$dev/operstate"; then
            wireless_interfaces+=" $(basename "$dev")"
        fi
    done

    # General configuration
    export wireless_interfaces
    ynh_render_template "dnsmasq.conf.tpl" "${pending_dir}/etc/dnsmasq.conf"

    # add domain conf files
    export interfaces
    export ipv4
    export ipv6
    for domain in $YNH_DOMAINS; do
        [[ ! $domain =~ \.local$ ]] || continue
        export domain
        ynh_render_template "domain.tpl" "${dnsmasq_dir}/${domain}"
    done

    # remove old domain conf files
    for conf_file in /etc/dnsmasq.d/*.*; do
        domain=$(basename "$conf_file")
        if [[ ! $YNH_DOMAINS =~ $domain ]] && [[ ! $domain =~ \.local$ ]]; then
            touch "${dnsmasq_dir}/${domain}"
        fi
    done
}

do_post_regen() {
    regen_conf_files=$1

    # Force permission (to cover some edge cases where root's umask is like 027 and then dnsmasq cant read this file)
    chown root /etc/resolv.dnsmasq.conf
    chmod 644 /etc/resolv.dnsmasq.conf

    # Fuck it, those domain/search entries from dhclient are usually annoying
    # lying shit from the ISP trying to MiTM
    if grep -q -E "^ *(domain|search)" /run/resolvconf/resolv.conf; then
        if grep -q -E "^ *(domain|search)" /run/resolvconf/interface/*.dhclient 2> /dev/null; then
            sed -E "s/^(domain|search)/#\1/g" -i /run/resolvconf/interface/*.dhclient
        fi

        grep -q '^supersede domain-name "";' /etc/dhcp/dhclient.conf 2> /dev/null || echo 'supersede domain-name "";' >> /etc/dhcp/dhclient.conf
        grep -q '^supersede domain-search "";' /etc/dhcp/dhclient.conf 2> /dev/null || echo 'supersede domain-search "";' >> /etc/dhcp/dhclient.conf
        grep -q '^supersede search "";' /etc/dhcp/dhclient.conf 2> /dev/null || echo 'supersede search "";' >> /etc/dhcp/dhclient.conf
        systemctl restart resolvconf
    fi

    # Some stupid things like rabbitmq-server used by onlyoffice won't work if
    # the *short* hostname doesn't exists in /etc/hosts -_-
    short_hostname=$(hostname -s)
    grep -q "127.0.0.1.*$short_hostname" /etc/hosts || echo -e "\n127.0.0.1\t$short_hostname" >> /etc/hosts

    [[ -n "$regen_conf_files" ]] || return 0

    # Remove / disable services likely to conflict with dnsmasq
    for SERVICE in systemd-resolved bind9; do
        systemctl is-enabled $SERVICE &> /dev/null && systemctl disable $SERVICE 2> /dev/null
        systemctl is-active $SERVICE &> /dev/null && systemctl stop $SERVICE
    done

    systemctl restart dnsmasq
}

"do_$1_regen" "${@:2}"
